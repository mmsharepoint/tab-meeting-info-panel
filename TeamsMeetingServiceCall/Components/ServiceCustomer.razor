@*@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Hosting
@inject TeamsFx teamsfx
@inject TeamsUserCredential teamsUserCredential
@inject IWebHostEnvironment HostEnvironment
@inject IConfiguration Configuration
@inject NavigationManager MyNavigationManager*@
@using TeamsMeetingServiceCall.Controllers;
@using TeamsMeetingServiceCall.Models;
@using System.Text;
@inject MicrosoftTeams MicrosoftTeams

<div class="welcome page">
  <div class="narrow page-padding">
    <img src="hello.png" />
    <h1 class="center">Customer Info</h1>
    <div class="gridTable">
      <div class="gridRow">
        <div class="gridCell3">
          <label>Name</label>
        </div>      
        <div class="gridCell9">
          <label id="customerName" class="infoData"></label>
        </div>
      </div>
      <div class="gridRow">
        <div class="gridCell3">
          <label>Phone</label>
        </div>
        <div class="gridCell9">
          <label id="customerPhone" class="infoData"></label>
        </div>
      </div>
      <div class="gridRow">
        <div class="gridCell3">
          <label>Email</label>
        </div>
        <div class="gridCell9">
          <label id="customerEmail" class="infoData"></label>
        </div>
      </div>
      <div class="gridRow">
        <div class="gridCell3">
          <label>ID</label>
        </div>
        <div class="gridCell9">
          <label id="customerID" class="infoData"></label>
        </div>
      </div>
    </div>
           
  </div>
</div>

@code {
    string customerName;
    string customerEmail;
    bool isInTeams;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        // if (firstRender)
        // {
        //     isInTeams = await MicrosoftTeams.IsInTeams();
        // }
        // if (isInTeams)
        // {
        //     await MicrosoftTeams.InitializeAsync();
        //     var context = await MicrosoftTeams.GetTeamsContextAsync();
        //     string encodedMeetingID = context.MeetingId;
        //     byte[] decodedBytes = Convert.FromBase64String(encodedMeetingID);
        //     string meetingID = Encoding.UTF8.GetString(decodedBytes).Replace("0#", "").Replace("#0", "");
        //     AzureTableController azureTableController = new AzureTableController();
        //     CustomerData customer = azureTableController.GetCustomer(meetingID);
        //     customerName = customer.Name;
        //     customerEmail = customerEmail;
        // }
    }
}
@*@code {
    string userName;
    string errorMessage;
    bool isInTeams;
    bool isLoading = true; 

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if(firstRender)
        {
            isInTeams = await MicrosoftTeams.IsInTeams();

            if (isInTeams)
            { 
               var user = await teamsUserCredential.GetUserInfoAsync();
               userName = user.DisplayName;
            }
            else
            {
                errorMessage = "Not running in Microsoft Teams.";
            }

            StateHasChanged();            
        }
    }

    private string GetEnvironmentName()
    {
        return HostEnvironment.IsDevelopment() ? "local environment" : "Azure environment";
    }
}*@

